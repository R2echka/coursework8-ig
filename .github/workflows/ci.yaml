name: Django CI

on: [push]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install flake8
      run: |
        python -m pip install --upgrade pip
        pip install flake8
    
    - name: Run flake8
      run: flake8 .

  test:
    needs: lint
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set environment variables
      run: echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
    
    - name: Run migrations
      env:
        DATABASE_NAME: test_db
        DATABASE_USER: postgres
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
        TEST_ENV: true
      run: python manage.py migrate
    
    - name: Run tests
      env:
        DATABASE_NAME: test_db
        DATABASE_USER: postgres
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
        TEST_ENV: true
      run: python manage.py test
  
  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3
      
      - name: Log in Docker hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
      
      - name: Build docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} .
      
      - name: Push Docker image in Docker hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.6.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}
      
      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          sudo usermod -a -G docker ${{ secrets.SSH_USER }}
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 80:8000 ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
          EOF